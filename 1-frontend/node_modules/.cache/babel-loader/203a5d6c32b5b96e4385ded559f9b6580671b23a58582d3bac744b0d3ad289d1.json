{"ast":null,"code":"// Authentication utilities for token management and API calls\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst USE_MOCK_AUTH = process.env.REACT_APP_USE_MOCK_AUTH === 'true' || true; // Enable mock for testing\n\n// Token storage keys\nconst ACCESS_TOKEN_KEY = 'kilowatt_access_token';\nconst REFRESH_TOKEN_KEY = 'kilowatt_refresh_token';\nconst USER_DATA_KEY = 'kilowatt_user_data';\n\n/**\n * Store authentication tokens in localStorage\n */\nexport const storeTokens = (accessToken, refreshToken) => {\n  localStorage.setItem(ACCESS_TOKEN_KEY, accessToken);\n  localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken);\n};\n\n/**\n * Get access token from localStorage\n */\nexport const getAccessToken = () => {\n  return localStorage.getItem(ACCESS_TOKEN_KEY);\n};\n\n/**\n * Get refresh token from localStorage\n */\nexport const getRefreshToken = () => {\n  return localStorage.getItem(REFRESH_TOKEN_KEY);\n};\n\n/**\n * Store user data in localStorage\n */\nexport const storeUserData = userData => {\n  localStorage.setItem(USER_DATA_KEY, JSON.stringify(userData));\n};\n\n/**\n * Get user data from localStorage\n */\nexport const getUserData = () => {\n  const userData = localStorage.getItem(USER_DATA_KEY);\n  return userData ? JSON.parse(userData) : null;\n};\n\n/**\n * Clear all authentication data from localStorage\n */\nexport const clearAuthData = () => {\n  localStorage.removeItem(ACCESS_TOKEN_KEY);\n  localStorage.removeItem(REFRESH_TOKEN_KEY);\n  localStorage.removeItem(USER_DATA_KEY);\n};\n\n/**\n * Check if user is authenticated (has valid tokens)\n */\nexport const isAuthenticated = () => {\n  const accessToken = getAccessToken();\n  const refreshToken = getRefreshToken();\n  return !!(accessToken && refreshToken);\n};\n\n/**\n * Decode JWT token to check expiration\n */\nexport const isTokenExpired = token => {\n  if (!token) return true;\n  try {\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    const currentTime = Date.now() / 1000;\n    return payload.exp < currentTime;\n  } catch (error) {\n    console.error('Error decoding token:', error);\n    return true;\n  }\n};\n\n/**\n * Refresh access token using refresh token\n */\nexport const refreshAccessToken = async () => {\n  const refreshToken = getRefreshToken();\n  if (!refreshToken || isTokenExpired(refreshToken)) {\n    throw new Error('No valid refresh token available');\n  }\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/v1/auth/refresh`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        refresh_token: refreshToken\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.detail || 'Failed to refresh token');\n    }\n    const data = await response.json();\n    storeTokens(data.access_token, data.refresh_token);\n    return data.access_token;\n  } catch (error) {\n    console.error('Token refresh failed:', error);\n    clearAuthData();\n    throw error;\n  }\n};\n\n/**\n * Make authenticated API request with automatic token refresh\n */\nexport const authenticatedFetch = async (url, options = {}) => {\n  let accessToken = getAccessToken();\n\n  // Check if access token is expired and refresh if needed\n  if (!accessToken || isTokenExpired(accessToken)) {\n    try {\n      accessToken = await refreshAccessToken();\n    } catch (error) {\n      throw new Error('Authentication failed');\n    }\n  }\n\n  // Make the API request with the access token\n  const response = await fetch(url, {\n    ...options,\n    headers: {\n      ...options.headers,\n      'Authorization': `Bearer ${accessToken}`,\n      'Content-Type': 'application/json'\n    }\n  });\n\n  // If we get a 401, try to refresh the token once more\n  if (response.status === 401) {\n    try {\n      accessToken = await refreshAccessToken();\n\n      // Retry the request with the new token\n      return await fetch(url, {\n        ...options,\n        headers: {\n          ...options.headers,\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n    } catch (error) {\n      clearAuthData();\n      throw new Error('Authentication failed');\n    }\n  }\n  return response;\n};\n\n/**\n * Mock login for testing\n */\nconst mockLogin = async (username, password) => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Simple mock validation\n  if (username === 'admin' && password === 'password') {\n    const mockTokens = {\n      access_token: 'mock_access_token_' + Date.now(),\n      refresh_token: 'mock_refresh_token_' + Date.now(),\n      token_type: 'bearer'\n    };\n    const mockUser = {\n      id: 1,\n      username: 'admin',\n      email: 'admin@kilowatt.com',\n      role: 'admin',\n      is_active: true,\n      created_at: new Date().toISOString()\n    };\n\n    // Store tokens and user data\n    storeTokens(mockTokens.access_token, mockTokens.refresh_token);\n    storeUserData(mockUser);\n    return {\n      tokens: mockTokens,\n      user: mockUser\n    };\n  } else {\n    throw new Error('Invalid username or password');\n  }\n};\n\n/**\n * Login user with username/email and password\n */\nexport const loginUser = async (username, password) => {\n  if (USE_MOCK_AUTH) {\n    console.log('Using mock authentication');\n    return await mockLogin(username, password);\n  }\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/v1/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Login failed');\n    }\n    const data = await response.json();\n\n    // Store tokens\n    storeTokens(data.access_token, data.refresh_token);\n\n    // Fetch and store user data\n    const userData = await getCurrentUser();\n    storeUserData(userData);\n    return {\n      tokens: data,\n      user: userData\n    };\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\n/**\n * Get current user data\n */\nexport const getCurrentUser = async () => {\n  if (USE_MOCK_AUTH) {\n    // Return stored user data in mock mode\n    const userData = getUserData();\n    if (userData) {\n      return userData;\n    } else {\n      throw new Error('No user data found');\n    }\n  }\n  try {\n    const response = await authenticatedFetch(`${API_BASE_URL}/api/v1/auth/me`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch user data');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Get current user error:', error);\n    throw error;\n  }\n};\n\n/**\n * Logout user\n */\nexport const logoutUser = () => {\n  clearAuthData();\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","USE_MOCK_AUTH","REACT_APP_USE_MOCK_AUTH","ACCESS_TOKEN_KEY","REFRESH_TOKEN_KEY","USER_DATA_KEY","storeTokens","accessToken","refreshToken","localStorage","setItem","getAccessToken","getItem","getRefreshToken","storeUserData","userData","JSON","stringify","getUserData","parse","clearAuthData","removeItem","isAuthenticated","isTokenExpired","token","payload","atob","split","currentTime","Date","now","exp","error","console","refreshAccessToken","Error","response","fetch","method","headers","body","refresh_token","ok","errorData","json","catch","detail","data","access_token","authenticatedFetch","url","options","status","mockLogin","username","password","Promise","resolve","setTimeout","mockTokens","token_type","mockUser","id","email","role","is_active","created_at","toISOString","tokens","user","loginUser","log","getCurrentUser","logoutUser"],"sources":["C:/Users/lcthu/Downloads/Wireframe-Application-Plan/1-frontend/src/utils/auth.js"],"sourcesContent":["// Authentication utilities for token management and API calls\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst USE_MOCK_AUTH = process.env.REACT_APP_USE_MOCK_AUTH === 'true' || true; // Enable mock for testing\n\n// Token storage keys\nconst ACCESS_TOKEN_KEY = 'kilowatt_access_token';\nconst REFRESH_TOKEN_KEY = 'kilowatt_refresh_token';\nconst USER_DATA_KEY = 'kilowatt_user_data';\n\n/**\n * Store authentication tokens in localStorage\n */\nexport const storeTokens = (accessToken, refreshToken) => {\n  localStorage.setItem(ACCESS_TOKEN_KEY, accessToken);\n  localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken);\n};\n\n/**\n * Get access token from localStorage\n */\nexport const getAccessToken = () => {\n  return localStorage.getItem(ACCESS_TOKEN_KEY);\n};\n\n/**\n * Get refresh token from localStorage\n */\nexport const getRefreshToken = () => {\n  return localStorage.getItem(REFRESH_TOKEN_KEY);\n};\n\n/**\n * Store user data in localStorage\n */\nexport const storeUserData = (userData) => {\n  localStorage.setItem(USER_DATA_KEY, JSON.stringify(userData));\n};\n\n/**\n * Get user data from localStorage\n */\nexport const getUserData = () => {\n  const userData = localStorage.getItem(USER_DATA_KEY);\n  return userData ? JSON.parse(userData) : null;\n};\n\n/**\n * Clear all authentication data from localStorage\n */\nexport const clearAuthData = () => {\n  localStorage.removeItem(ACCESS_TOKEN_KEY);\n  localStorage.removeItem(REFRESH_TOKEN_KEY);\n  localStorage.removeItem(USER_DATA_KEY);\n};\n\n/**\n * Check if user is authenticated (has valid tokens)\n */\nexport const isAuthenticated = () => {\n  const accessToken = getAccessToken();\n  const refreshToken = getRefreshToken();\n  return !!(accessToken && refreshToken);\n};\n\n/**\n * Decode JWT token to check expiration\n */\nexport const isTokenExpired = (token) => {\n  if (!token) return true;\n  \n  try {\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    const currentTime = Date.now() / 1000;\n    return payload.exp < currentTime;\n  } catch (error) {\n    console.error('Error decoding token:', error);\n    return true;\n  }\n};\n\n/**\n * Refresh access token using refresh token\n */\nexport const refreshAccessToken = async () => {\n  const refreshToken = getRefreshToken();\n\n  if (!refreshToken || isTokenExpired(refreshToken)) {\n    throw new Error('No valid refresh token available');\n  }\n\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/v1/auth/refresh`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ refresh_token: refreshToken }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.detail || 'Failed to refresh token');\n    }\n\n    const data = await response.json();\n    storeTokens(data.access_token, data.refresh_token);\n\n    return data.access_token;\n  } catch (error) {\n    console.error('Token refresh failed:', error);\n    clearAuthData();\n    throw error;\n  }\n};\n\n/**\n * Make authenticated API request with automatic token refresh\n */\nexport const authenticatedFetch = async (url, options = {}) => {\n  let accessToken = getAccessToken();\n  \n  // Check if access token is expired and refresh if needed\n  if (!accessToken || isTokenExpired(accessToken)) {\n    try {\n      accessToken = await refreshAccessToken();\n    } catch (error) {\n      throw new Error('Authentication failed');\n    }\n  }\n\n  // Make the API request with the access token\n  const response = await fetch(url, {\n    ...options,\n    headers: {\n      ...options.headers,\n      'Authorization': `Bearer ${accessToken}`,\n      'Content-Type': 'application/json',\n    },\n  });\n\n  // If we get a 401, try to refresh the token once more\n  if (response.status === 401) {\n    try {\n      accessToken = await refreshAccessToken();\n      \n      // Retry the request with the new token\n      return await fetch(url, {\n        ...options,\n        headers: {\n          ...options.headers,\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json',\n        },\n      });\n    } catch (error) {\n      clearAuthData();\n      throw new Error('Authentication failed');\n    }\n  }\n\n  return response;\n};\n\n/**\n * Mock login for testing\n */\nconst mockLogin = async (username, password) => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Simple mock validation\n  if (username === 'admin' && password === 'password') {\n    const mockTokens = {\n      access_token: 'mock_access_token_' + Date.now(),\n      refresh_token: 'mock_refresh_token_' + Date.now(),\n      token_type: 'bearer'\n    };\n\n    const mockUser = {\n      id: 1,\n      username: 'admin',\n      email: 'admin@kilowatt.com',\n      role: 'admin',\n      is_active: true,\n      created_at: new Date().toISOString(),\n    };\n\n    // Store tokens and user data\n    storeTokens(mockTokens.access_token, mockTokens.refresh_token);\n    storeUserData(mockUser);\n\n    return { tokens: mockTokens, user: mockUser };\n  } else {\n    throw new Error('Invalid username or password');\n  }\n};\n\n/**\n * Login user with username/email and password\n */\nexport const loginUser = async (username, password) => {\n  if (USE_MOCK_AUTH) {\n    console.log('Using mock authentication');\n    return await mockLogin(username, password);\n  }\n\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/v1/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password,\n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Login failed');\n    }\n\n    const data = await response.json();\n\n    // Store tokens\n    storeTokens(data.access_token, data.refresh_token);\n\n    // Fetch and store user data\n    const userData = await getCurrentUser();\n    storeUserData(userData);\n\n    return { tokens: data, user: userData };\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\n/**\n * Get current user data\n */\nexport const getCurrentUser = async () => {\n  if (USE_MOCK_AUTH) {\n    // Return stored user data in mock mode\n    const userData = getUserData();\n    if (userData) {\n      return userData;\n    } else {\n      throw new Error('No user data found');\n    }\n  }\n\n  try {\n    const response = await authenticatedFetch(`${API_BASE_URL}/api/v1/auth/me`);\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch user data');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Get current user error:', error);\n    throw error;\n  }\n};\n\n/**\n * Logout user\n */\nexport const logoutUser = () => {\n  clearAuthData();\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAC7E,MAAMC,aAAa,GAAGH,OAAO,CAACC,GAAG,CAACG,uBAAuB,KAAK,MAAM,IAAI,IAAI,CAAC,CAAC;;AAE9E;AACA,MAAMC,gBAAgB,GAAG,uBAAuB;AAChD,MAAMC,iBAAiB,GAAG,wBAAwB;AAClD,MAAMC,aAAa,GAAG,oBAAoB;;AAE1C;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAGA,CAACC,WAAW,EAAEC,YAAY,KAAK;EACxDC,YAAY,CAACC,OAAO,CAACP,gBAAgB,EAAEI,WAAW,CAAC;EACnDE,YAAY,CAACC,OAAO,CAACN,iBAAiB,EAAEI,YAAY,CAAC;AACvD,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMG,cAAc,GAAGA,CAAA,KAAM;EAClC,OAAOF,YAAY,CAACG,OAAO,CAACT,gBAAgB,CAAC;AAC/C,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMU,eAAe,GAAGA,CAAA,KAAM;EACnC,OAAOJ,YAAY,CAACG,OAAO,CAACR,iBAAiB,CAAC;AAChD,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMU,aAAa,GAAIC,QAAQ,IAAK;EACzCN,YAAY,CAACC,OAAO,CAACL,aAAa,EAAEW,IAAI,CAACC,SAAS,CAACF,QAAQ,CAAC,CAAC;AAC/D,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMG,WAAW,GAAGA,CAAA,KAAM;EAC/B,MAAMH,QAAQ,GAAGN,YAAY,CAACG,OAAO,CAACP,aAAa,CAAC;EACpD,OAAOU,QAAQ,GAAGC,IAAI,CAACG,KAAK,CAACJ,QAAQ,CAAC,GAAG,IAAI;AAC/C,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMK,aAAa,GAAGA,CAAA,KAAM;EACjCX,YAAY,CAACY,UAAU,CAAClB,gBAAgB,CAAC;EACzCM,YAAY,CAACY,UAAU,CAACjB,iBAAiB,CAAC;EAC1CK,YAAY,CAACY,UAAU,CAAChB,aAAa,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMiB,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMf,WAAW,GAAGI,cAAc,CAAC,CAAC;EACpC,MAAMH,YAAY,GAAGK,eAAe,CAAC,CAAC;EACtC,OAAO,CAAC,EAAEN,WAAW,IAAIC,YAAY,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMe,cAAc,GAAIC,KAAK,IAAK;EACvC,IAAI,CAACA,KAAK,EAAE,OAAO,IAAI;EAEvB,IAAI;IACF,MAAMC,OAAO,GAAGT,IAAI,CAACG,KAAK,CAACO,IAAI,CAACF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;IACrC,OAAOL,OAAO,CAACM,GAAG,GAAGH,WAAW;EAClC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAME,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,MAAM1B,YAAY,GAAGK,eAAe,CAAC,CAAC;EAEtC,IAAI,CAACL,YAAY,IAAIe,cAAc,CAACf,YAAY,CAAC,EAAE;IACjD,MAAM,IAAI2B,KAAK,CAAC,kCAAkC,CAAC;EACrD;EAEA,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGxC,YAAY,sBAAsB,EAAE;MAClEyC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAExB,IAAI,CAACC,SAAS,CAAC;QAAEwB,aAAa,EAAEjC;MAAa,CAAC;IACtD,CAAC,CAAC;IAEF,IAAI,CAAC4B,QAAQ,CAACM,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;MACzD,MAAM,IAAIV,KAAK,CAACQ,SAAS,CAACG,MAAM,IAAI,yBAAyB,CAAC;IAChE;IAEA,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClCtC,WAAW,CAACyC,IAAI,CAACC,YAAY,EAAED,IAAI,CAACN,aAAa,CAAC;IAElD,OAAOM,IAAI,CAACC,YAAY;EAC1B,CAAC,CAAC,OAAOhB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7CZ,aAAa,CAAC,CAAC;IACf,MAAMY,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMiB,kBAAkB,GAAG,MAAAA,CAAOC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EAC7D,IAAI5C,WAAW,GAAGI,cAAc,CAAC,CAAC;;EAElC;EACA,IAAI,CAACJ,WAAW,IAAIgB,cAAc,CAAChB,WAAW,CAAC,EAAE;IAC/C,IAAI;MACFA,WAAW,GAAG,MAAM2B,kBAAkB,CAAC,CAAC;IAC1C,CAAC,CAAC,OAAOF,KAAK,EAAE;MACd,MAAM,IAAIG,KAAK,CAAC,uBAAuB,CAAC;IAC1C;EACF;;EAEA;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACa,GAAG,EAAE;IAChC,GAAGC,OAAO;IACVZ,OAAO,EAAE;MACP,GAAGY,OAAO,CAACZ,OAAO;MAClB,eAAe,EAAE,UAAUhC,WAAW,EAAE;MACxC,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;;EAEF;EACA,IAAI6B,QAAQ,CAACgB,MAAM,KAAK,GAAG,EAAE;IAC3B,IAAI;MACF7C,WAAW,GAAG,MAAM2B,kBAAkB,CAAC,CAAC;;MAExC;MACA,OAAO,MAAMG,KAAK,CAACa,GAAG,EAAE;QACtB,GAAGC,OAAO;QACVZ,OAAO,EAAE;UACP,GAAGY,OAAO,CAACZ,OAAO;UAClB,eAAe,EAAE,UAAUhC,WAAW,EAAE;UACxC,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOyB,KAAK,EAAE;MACdZ,aAAa,CAAC,CAAC;MACf,MAAM,IAAIe,KAAK,CAAC,uBAAuB,CAAC;IAC1C;EACF;EAEA,OAAOC,QAAQ;AACjB,CAAC;;AAED;AACA;AACA;AACA,MAAMiB,SAAS,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EAC9C;EACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEvD;EACA,IAAIH,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,UAAU,EAAE;IACnD,MAAMI,UAAU,GAAG;MACjBX,YAAY,EAAE,oBAAoB,GAAGnB,IAAI,CAACC,GAAG,CAAC,CAAC;MAC/CW,aAAa,EAAE,qBAAqB,GAAGZ,IAAI,CAACC,GAAG,CAAC,CAAC;MACjD8B,UAAU,EAAE;IACd,CAAC;IAED,MAAMC,QAAQ,GAAG;MACfC,EAAE,EAAE,CAAC;MACLR,QAAQ,EAAE,OAAO;MACjBS,KAAK,EAAE,oBAAoB;MAC3BC,IAAI,EAAE,OAAO;MACbC,SAAS,EAAE,IAAI;MACfC,UAAU,EAAE,IAAIrC,IAAI,CAAC,CAAC,CAACsC,WAAW,CAAC;IACrC,CAAC;;IAED;IACA7D,WAAW,CAACqD,UAAU,CAACX,YAAY,EAAEW,UAAU,CAAClB,aAAa,CAAC;IAC9D3B,aAAa,CAAC+C,QAAQ,CAAC;IAEvB,OAAO;MAAEO,MAAM,EAAET,UAAU;MAAEU,IAAI,EAAER;IAAS,CAAC;EAC/C,CAAC,MAAM;IACL,MAAM,IAAI1B,KAAK,CAAC,8BAA8B,CAAC;EACjD;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMmC,SAAS,GAAG,MAAAA,CAAOhB,QAAQ,EAAEC,QAAQ,KAAK;EACrD,IAAItD,aAAa,EAAE;IACjBgC,OAAO,CAACsC,GAAG,CAAC,2BAA2B,CAAC;IACxC,OAAO,MAAMlB,SAAS,CAACC,QAAQ,EAAEC,QAAQ,CAAC;EAC5C;EAEA,IAAI;IACF,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGxC,YAAY,oBAAoB,EAAE;MAChEyC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAExB,IAAI,CAACC,SAAS,CAAC;QACnBqC,QAAQ,EAAEA,QAAQ;QAClBC,QAAQ,EAAEA;MACZ,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACnB,QAAQ,CAACM,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIT,KAAK,CAACQ,SAAS,CAACG,MAAM,IAAI,cAAc,CAAC;IACrD;IAEA,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACQ,IAAI,CAAC,CAAC;;IAElC;IACAtC,WAAW,CAACyC,IAAI,CAACC,YAAY,EAAED,IAAI,CAACN,aAAa,CAAC;;IAElD;IACA,MAAM1B,QAAQ,GAAG,MAAMyD,cAAc,CAAC,CAAC;IACvC1D,aAAa,CAACC,QAAQ,CAAC;IAEvB,OAAO;MAAEqD,MAAM,EAAErB,IAAI;MAAEsB,IAAI,EAAEtD;IAAS,CAAC;EACzC,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMwC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAIvE,aAAa,EAAE;IACjB;IACA,MAAMc,QAAQ,GAAGG,WAAW,CAAC,CAAC;IAC9B,IAAIH,QAAQ,EAAE;MACZ,OAAOA,QAAQ;IACjB,CAAC,MAAM;MACL,MAAM,IAAIoB,KAAK,CAAC,oBAAoB,CAAC;IACvC;EACF;EAEA,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMa,kBAAkB,CAAC,GAAGpD,YAAY,iBAAiB,CAAC;IAE3E,IAAI,CAACuC,QAAQ,CAACM,EAAE,EAAE;MAChB,MAAM,IAAIP,KAAK,CAAC,2BAA2B,CAAC;IAC9C;IAEA,OAAO,MAAMC,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMyC,UAAU,GAAGA,CAAA,KAAM;EAC9BrD,aAAa,CAAC,CAAC;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
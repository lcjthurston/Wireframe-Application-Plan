{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lcthu\\\\Downloads\\\\Wireframe-Application-Plan\\\\1-frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { isAuthenticated, getUserData, loginUser, logoutUser, getCurrentUser, clearAuthData, getAccessToken } from '../utils/auth';\n\n// Auth action types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AUTH_ACTIONS = {\n  LOGIN_START: 'LOGIN_START',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGIN_FAILURE: 'LOGIN_FAILURE',\n  LOGOUT: 'LOGOUT',\n  RESTORE_SESSION: 'RESTORE_SESSION',\n  UPDATE_USER: 'UPDATE_USER'\n};\n\n// Initial auth state\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  loading: true,\n  error: null\n};\n\n// Auth reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case AUTH_ACTIONS.LOGIN_START:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        loading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.LOGIN_FAILURE:\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        loading: false,\n        error: action.payload.error\n      };\n    case AUTH_ACTIONS.LOGOUT:\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        loading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.RESTORE_SESSION:\n      return {\n        ...state,\n        isAuthenticated: action.payload.isAuthenticated,\n        user: action.payload.user,\n        loading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.UPDATE_USER:\n      return {\n        ...state,\n        user: action.payload.user\n      };\n    default:\n      return state;\n  }\n};\n\n// Create auth context\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Restore authentication session on app load\n  useEffect(() => {\n    const restoreSession = async () => {\n      console.log('Restoring authentication session...');\n      try {\n        if (isAuthenticated()) {\n          console.log('Found stored tokens, checking validity...');\n          const userData = getUserData();\n          if (userData) {\n            console.log('Found stored user data:', userData);\n            // For now, just restore from localStorage without API call\n            // TODO: Verify the session is still valid by fetching current user\n            dispatch({\n              type: AUTH_ACTIONS.RESTORE_SESSION,\n              payload: {\n                isAuthenticated: true,\n                user: userData\n              }\n            });\n            console.log('Session restored successfully');\n          } else {\n            console.log('No user data found, clearing auth data');\n            clearAuthData();\n            dispatch({\n              type: AUTH_ACTIONS.RESTORE_SESSION,\n              payload: {\n                isAuthenticated: false,\n                user: null\n              }\n            });\n          }\n        } else {\n          console.log('No stored tokens found');\n          dispatch({\n            type: AUTH_ACTIONS.RESTORE_SESSION,\n            payload: {\n              isAuthenticated: false,\n              user: null\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Error restoring session:', error);\n        clearAuthData();\n        dispatch({\n          type: AUTH_ACTIONS.RESTORE_SESSION,\n          payload: {\n            isAuthenticated: false,\n            user: null\n          }\n        });\n      }\n    };\n    restoreSession();\n  }, []);\n\n  // Login function\n  const login = async (username, password) => {\n    dispatch({\n      type: AUTH_ACTIONS.LOGIN_START\n    });\n    try {\n      const result = await loginUser(username, password);\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_SUCCESS,\n        payload: {\n          user: result.user\n        }\n      });\n      return result;\n    } catch (error) {\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_FAILURE,\n        payload: {\n          error: error.message\n        }\n      });\n      throw error;\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    logoutUser();\n    dispatch({\n      type: AUTH_ACTIONS.LOGOUT\n    });\n  };\n\n  // Update user data\n  const updateUser = userData => {\n    dispatch({\n      type: AUTH_ACTIONS.UPDATE_USER,\n      payload: {\n        user: userData\n      }\n    });\n  };\n\n  // Check if user has specific role\n  const hasRole = role => {\n    var _state$user;\n    return ((_state$user = state.user) === null || _state$user === void 0 ? void 0 : _state$user.role) === role;\n  };\n\n  // Check if user is admin\n  const isAdmin = () => {\n    return hasRole('admin');\n  };\n  const value = {\n    ...state,\n    login,\n    logout,\n    updateUser,\n    hasRole,\n    isAdmin\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use auth context\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","isAuthenticated","getUserData","loginUser","logoutUser","getCurrentUser","clearAuthData","getAccessToken","jsxDEV","_jsxDEV","AUTH_ACTIONS","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","RESTORE_SESSION","UPDATE_USER","initialState","user","loading","error","authReducer","state","action","type","payload","AuthContext","AuthProvider","children","_s","dispatch","restoreSession","console","log","userData","login","username","password","result","message","logout","updateUser","hasRole","role","_state$user","isAdmin","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/lcthu/Downloads/Wireframe-Application-Plan/1-frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport {\n  isAuthenticated,\n  getUserData,\n  loginUser,\n  logoutUser,\n  getCurrentUser,\n  clearAuthData,\n  getAccessToken,\n} from '../utils/auth';\n\n// Auth action types\nconst AUTH_ACTIONS = {\n  LOGIN_START: 'LOGIN_START',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGIN_FAILURE: 'LOGIN_FAILURE',\n  LOGOUT: 'LOGOUT',\n  RESTORE_SESSION: 'RESTORE_SESSION',\n  UPDATE_USER: 'UPDATE_USER',\n};\n\n// Initial auth state\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  loading: true,\n  error: null,\n};\n\n// Auth reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case AUTH_ACTIONS.LOGIN_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    \n    case AUTH_ACTIONS.LOGIN_SUCCESS:\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        loading: false,\n        error: null,\n      };\n    \n    case AUTH_ACTIONS.LOGIN_FAILURE:\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        loading: false,\n        error: action.payload.error,\n      };\n    \n    case AUTH_ACTIONS.LOGOUT:\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        loading: false,\n        error: null,\n      };\n    \n    case AUTH_ACTIONS.RESTORE_SESSION:\n      return {\n        ...state,\n        isAuthenticated: action.payload.isAuthenticated,\n        user: action.payload.user,\n        loading: false,\n        error: null,\n      };\n    \n    case AUTH_ACTIONS.UPDATE_USER:\n      return {\n        ...state,\n        user: action.payload.user,\n      };\n    \n    default:\n      return state;\n  }\n};\n\n// Create auth context\nconst AuthContext = createContext();\n\n// Auth provider component\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Restore authentication session on app load\n  useEffect(() => {\n    const restoreSession = async () => {\n      console.log('Restoring authentication session...');\n\n      try {\n        if (isAuthenticated()) {\n          console.log('Found stored tokens, checking validity...');\n          const userData = getUserData();\n\n          if (userData) {\n            console.log('Found stored user data:', userData);\n            // For now, just restore from localStorage without API call\n            // TODO: Verify the session is still valid by fetching current user\n            dispatch({\n              type: AUTH_ACTIONS.RESTORE_SESSION,\n              payload: {\n                isAuthenticated: true,\n                user: userData,\n              },\n            });\n            console.log('Session restored successfully');\n          } else {\n            console.log('No user data found, clearing auth data');\n            clearAuthData();\n            dispatch({\n              type: AUTH_ACTIONS.RESTORE_SESSION,\n              payload: {\n                isAuthenticated: false,\n                user: null,\n              },\n            });\n          }\n        } else {\n          console.log('No stored tokens found');\n          dispatch({\n            type: AUTH_ACTIONS.RESTORE_SESSION,\n            payload: {\n              isAuthenticated: false,\n              user: null,\n            },\n          });\n        }\n      } catch (error) {\n        console.error('Error restoring session:', error);\n        clearAuthData();\n        dispatch({\n          type: AUTH_ACTIONS.RESTORE_SESSION,\n          payload: {\n            isAuthenticated: false,\n            user: null,\n          },\n        });\n      }\n    };\n\n    restoreSession();\n  }, []);\n\n  // Login function\n  const login = async (username, password) => {\n    dispatch({ type: AUTH_ACTIONS.LOGIN_START });\n    \n    try {\n      const result = await loginUser(username, password);\n      \n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_SUCCESS,\n        payload: {\n          user: result.user,\n        },\n      });\n      \n      return result;\n    } catch (error) {\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_FAILURE,\n        payload: {\n          error: error.message,\n        },\n      });\n      throw error;\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    logoutUser();\n    dispatch({ type: AUTH_ACTIONS.LOGOUT });\n  };\n\n  // Update user data\n  const updateUser = (userData) => {\n    dispatch({\n      type: AUTH_ACTIONS.UPDATE_USER,\n      payload: {\n        user: userData,\n      },\n    });\n  };\n\n  // Check if user has specific role\n  const hasRole = (role) => {\n    return state.user?.role === role;\n  };\n\n  // Check if user is admin\n  const isAdmin = () => {\n    return hasRole('admin');\n  };\n\n  const value = {\n    ...state,\n    login,\n    logout,\n    updateUser,\n    hasRole,\n    isAdmin,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  \n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  \n  return context;\n};\n\nexport default AuthContext;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC/E,SACEC,eAAe,EACfC,WAAW,EACXC,SAAS,EACTC,UAAU,EACVC,cAAc,EACdC,aAAa,EACbC,cAAc,QACT,eAAe;;AAEtB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG;EACnBC,WAAW,EAAE,aAAa;EAC1BC,aAAa,EAAE,eAAe;EAC9BC,aAAa,EAAE,eAAe;EAC9BC,MAAM,EAAE,QAAQ;EAChBC,eAAe,EAAE,iBAAiB;EAClCC,WAAW,EAAE;AACf,CAAC;;AAED;AACA,MAAMC,YAAY,GAAG;EACnBhB,eAAe,EAAE,KAAK;EACtBiB,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKd,YAAY,CAACC,WAAW;MAC3B,OAAO;QACL,GAAGW,KAAK;QACRH,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE;MACT,CAAC;IAEH,KAAKV,YAAY,CAACE,aAAa;MAC7B,OAAO;QACL,GAAGU,KAAK;QACRrB,eAAe,EAAE,IAAI;QACrBiB,IAAI,EAAEK,MAAM,CAACE,OAAO,CAACP,IAAI;QACzBC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IAEH,KAAKV,YAAY,CAACG,aAAa;MAC7B,OAAO;QACL,GAAGS,KAAK;QACRrB,eAAe,EAAE,KAAK;QACtBiB,IAAI,EAAE,IAAI;QACVC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEG,MAAM,CAACE,OAAO,CAACL;MACxB,CAAC;IAEH,KAAKV,YAAY,CAACI,MAAM;MACtB,OAAO;QACL,GAAGQ,KAAK;QACRrB,eAAe,EAAE,KAAK;QACtBiB,IAAI,EAAE,IAAI;QACVC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IAEH,KAAKV,YAAY,CAACK,eAAe;MAC/B,OAAO;QACL,GAAGO,KAAK;QACRrB,eAAe,EAAEsB,MAAM,CAACE,OAAO,CAACxB,eAAe;QAC/CiB,IAAI,EAAEK,MAAM,CAACE,OAAO,CAACP,IAAI;QACzBC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IAEH,KAAKV,YAAY,CAACM,WAAW;MAC3B,OAAO;QACL,GAAGM,KAAK;QACRJ,IAAI,EAAEK,MAAM,CAACE,OAAO,CAACP;MACvB,CAAC;IAEH;MACE,OAAOI,KAAK;EAChB;AACF,CAAC;;AAED;AACA,MAAMI,WAAW,gBAAG7B,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAM8B,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACP,KAAK,EAAEQ,QAAQ,CAAC,GAAG/B,UAAU,CAACsB,WAAW,EAAEJ,YAAY,CAAC;;EAE/D;EACAjB,SAAS,CAAC,MAAM;IACd,MAAM+B,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjCC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;MAElD,IAAI;QACF,IAAIhC,eAAe,CAAC,CAAC,EAAE;UACrB+B,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;UACxD,MAAMC,QAAQ,GAAGhC,WAAW,CAAC,CAAC;UAE9B,IAAIgC,QAAQ,EAAE;YACZF,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEC,QAAQ,CAAC;YAChD;YACA;YACAJ,QAAQ,CAAC;cACPN,IAAI,EAAEd,YAAY,CAACK,eAAe;cAClCU,OAAO,EAAE;gBACPxB,eAAe,EAAE,IAAI;gBACrBiB,IAAI,EAAEgB;cACR;YACF,CAAC,CAAC;YACFF,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;UAC9C,CAAC,MAAM;YACLD,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;YACrD3B,aAAa,CAAC,CAAC;YACfwB,QAAQ,CAAC;cACPN,IAAI,EAAEd,YAAY,CAACK,eAAe;cAClCU,OAAO,EAAE;gBACPxB,eAAe,EAAE,KAAK;gBACtBiB,IAAI,EAAE;cACR;YACF,CAAC,CAAC;UACJ;QACF,CAAC,MAAM;UACLc,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;UACrCH,QAAQ,CAAC;YACPN,IAAI,EAAEd,YAAY,CAACK,eAAe;YAClCU,OAAO,EAAE;cACPxB,eAAe,EAAE,KAAK;cACtBiB,IAAI,EAAE;YACR;UACF,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdY,OAAO,CAACZ,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChDd,aAAa,CAAC,CAAC;QACfwB,QAAQ,CAAC;UACPN,IAAI,EAAEd,YAAY,CAACK,eAAe;UAClCU,OAAO,EAAE;YACPxB,eAAe,EAAE,KAAK;YACtBiB,IAAI,EAAE;UACR;QACF,CAAC,CAAC;MACJ;IACF,CAAC;IAEDa,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMI,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IAC1CP,QAAQ,CAAC;MAAEN,IAAI,EAAEd,YAAY,CAACC;IAAY,CAAC,CAAC;IAE5C,IAAI;MACF,MAAM2B,MAAM,GAAG,MAAMnC,SAAS,CAACiC,QAAQ,EAAEC,QAAQ,CAAC;MAElDP,QAAQ,CAAC;QACPN,IAAI,EAAEd,YAAY,CAACE,aAAa;QAChCa,OAAO,EAAE;UACPP,IAAI,EAAEoB,MAAM,CAACpB;QACf;MACF,CAAC,CAAC;MAEF,OAAOoB,MAAM;IACf,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACdU,QAAQ,CAAC;QACPN,IAAI,EAAEd,YAAY,CAACG,aAAa;QAChCY,OAAO,EAAE;UACPL,KAAK,EAAEA,KAAK,CAACmB;QACf;MACF,CAAC,CAAC;MACF,MAAMnB,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMoB,MAAM,GAAGA,CAAA,KAAM;IACnBpC,UAAU,CAAC,CAAC;IACZ0B,QAAQ,CAAC;MAAEN,IAAI,EAAEd,YAAY,CAACI;IAAO,CAAC,CAAC;EACzC,CAAC;;EAED;EACA,MAAM2B,UAAU,GAAIP,QAAQ,IAAK;IAC/BJ,QAAQ,CAAC;MACPN,IAAI,EAAEd,YAAY,CAACM,WAAW;MAC9BS,OAAO,EAAE;QACPP,IAAI,EAAEgB;MACR;IACF,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMQ,OAAO,GAAIC,IAAI,IAAK;IAAA,IAAAC,WAAA;IACxB,OAAO,EAAAA,WAAA,GAAAtB,KAAK,CAACJ,IAAI,cAAA0B,WAAA,uBAAVA,WAAA,CAAYD,IAAI,MAAKA,IAAI;EAClC,CAAC;;EAED;EACA,MAAME,OAAO,GAAGA,CAAA,KAAM;IACpB,OAAOH,OAAO,CAAC,OAAO,CAAC;EACzB,CAAC;EAED,MAAMI,KAAK,GAAG;IACZ,GAAGxB,KAAK;IACRa,KAAK;IACLK,MAAM;IACNC,UAAU;IACVC,OAAO;IACPG;EACF,CAAC;EAED,oBACEpC,OAAA,CAACiB,WAAW,CAACqB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAlB,QAAA,EAChCA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAtB,EAAA,CAlIaF,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAmIzB,OAAO,MAAM0B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGzD,UAAU,CAAC4B,WAAW,CAAC;EAEvC,IAAI,CAAC6B,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EAEA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CARWD,OAAO;AAUpB,eAAe3B,WAAW;AAAC,IAAA0B,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}